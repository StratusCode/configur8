- case: sanity
  main: |
    from configur8 import env

    x = env.float("FOO")

    reveal_type(x)  # N: Revealed type is "builtins.float"

- case: default
  main: |
    from configur8 import env

    x = env.float("FOO", "BAR")

    reveal_type(x)  # N: Revealed type is "builtins.float"

- case: bad_default
  main: |
    from configur8 import env

    x = env.float("FOO", [1])
  out: |
    main:3: error: Argument 2 to "__call__" of "EnvVar" has incompatible type "List[int]"; expected "Union[Empty, str, float]"  [arg-type]

- case: optional
  main: |
    from configur8 import env

    x = env.float.optional("FOO")

    reveal_type(x)  # N: Revealed type is "Union[builtins.float, None]"

- case: list
  main: |
    from configur8 import env

    x = env.float.list("FOO")

    reveal_type(x)  # N: Revealed type is "builtins.list[builtins.float]"

- case: list_optional
  main: |
    from configur8 import env

    x = env.float.list_optional("FOO")

    reveal_type(x)  # N: Revealed type is "Union[builtins.list[builtins.float], None]"
